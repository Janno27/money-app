{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\n// Cache pour les sessions, avec une durée de vie de 1 minute\nconst sessionCache = new Map<string, { session: any, timestamp: number }>()\nconst SESSION_CACHE_DURATION = 60000 // 1 minute en millisecondes\n\nexport async function middleware(req: NextRequest) {\n  const res = NextResponse.next()\n  const supabase = createMiddlewareClient({ req, res })\n  \n  try {\n    // Génération d'une clé de cache basée sur le token d'authentification\n    // Utiliser await avec cookies() pour éviter l'erreur \"cookies() should be awaited\"\n    const supabaseCookie = req.cookies.get('sb-ouiwpkxvjxcfbypmurap-auth-token')?.value\n    const cacheKey = supabaseCookie || 'anonymous'\n    \n    // Vérifier si nous avons une session en cache et si elle est encore valide\n    const now = Date.now()\n    const cachedData = sessionCache.get(cacheKey)\n    \n    let session = null\n    \n    if (cachedData && (now - cachedData.timestamp) < SESSION_CACHE_DURATION) {\n      // Utiliser la session en cache\n      session = cachedData.session\n      console.log(\"Using cached session\")\n    } else {\n      // Récupérer une nouvelle session\n      const { data } = await supabase.auth.getSession()\n      session = data.session\n      \n      // Mettre en cache la session\n      sessionCache.set(cacheKey, { \n        session, \n        timestamp: now \n      })\n      console.log(\"Fetched new session\")\n    }\n\n    // Si l'utilisateur n'est pas connecté et tente d'accéder à une route protégée\n    const isAuthRoute = req.nextUrl.pathname.startsWith('/login') || \n                        req.nextUrl.pathname.startsWith('/signup') ||\n                        req.nextUrl.pathname.startsWith('/accept-invitation') ||\n                        req.nextUrl.pathname.startsWith('/join')\n    \n    const isOnboardingRoute = req.nextUrl.pathname.startsWith('/onboarding')\n    \n    if (!session && !isAuthRoute && !isOnboardingRoute && req.nextUrl.pathname !== '/') {\n      console.log(\"Redirecting to login (unauthenticated)\")\n      return NextResponse.redirect(new URL('/login', req.url))\n    }\n\n    // Si l'utilisateur est connecté et tente d'accéder à la page login/signup\n    if (session && isAuthRoute) {\n      console.log(\"Redirecting to onboarding (already authenticated)\")\n      return NextResponse.redirect(new URL('/onboarding', req.url))\n    }\n    \n    return res\n  } catch (error) {\n    console.error(\"Middleware error:\", error)\n    // En cas d'erreur, continuer sans bloquer l'utilisateur\n    return res\n  }\n}\n\n// Configuration des routes à protéger\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - login (auth page)\n     */\n    '/',\n    '/dashboard/:path*',\n    '/onboarding',\n    '/((?!_next/static|_next/image|favicon.ico|login).*)']\n}"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;AAGA,6DAA6D;AAC7D,MAAM,eAAe,IAAI;AACzB,MAAM,yBAAyB,MAAM,4BAA4B;;AAE1D,eAAe,WAAW,GAAgB;IAC/C,MAAM,MAAM,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC7B,MAAM,WAAW,CAAA,GAAA,wKAAA,CAAA,yBAAsB,AAAD,EAAE;QAAE;QAAK;IAAI;IAEnD,IAAI;QACF,sEAAsE;QACtE,mFAAmF;QACnF,MAAM,iBAAiB,IAAI,OAAO,CAAC,GAAG,CAAC,uCAAuC;QAC9E,MAAM,WAAW,kBAAkB;QAEnC,2EAA2E;QAC3E,MAAM,MAAM,KAAK,GAAG;QACpB,MAAM,aAAa,aAAa,GAAG,CAAC;QAEpC,IAAI,UAAU;QAEd,IAAI,cAAc,AAAC,MAAM,WAAW,SAAS,GAAI,wBAAwB;YACvE,+BAA+B;YAC/B,UAAU,WAAW,OAAO;YAC5B,QAAQ,GAAG,CAAC;QACd,OAAO;YACL,iCAAiC;YACjC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU;YAC/C,UAAU,KAAK,OAAO;YAEtB,6BAA6B;YAC7B,aAAa,GAAG,CAAC,UAAU;gBACzB;gBACA,WAAW;YACb;YACA,QAAQ,GAAG,CAAC;QACd;QAEA,8EAA8E;QAC9E,MAAM,cAAc,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aAChC,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,cAChC,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,yBAChC,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;QAEpD,MAAM,oBAAoB,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;QAE1D,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,qBAAqB,IAAI,OAAO,CAAC,QAAQ,KAAK,KAAK;YAClF,QAAQ,GAAG,CAAC;YACZ,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;QACxD;QAEA,0EAA0E;QAC1E,IAAI,WAAW,aAAa;YAC1B,QAAQ,GAAG,CAAC;YACZ,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,eAAe,IAAI,GAAG;QAC7D;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,wDAAwD;QACxD,OAAO;IACT;AACF;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;QACA;QACA;QACA;KAAsD;AAC1D"}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}